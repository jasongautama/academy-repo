AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  AWS CloudFormation Template for Tokopedia Academy. Create
  an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. You will be billed for the AWS resources used
  if you create a stack from this template.
Parameters:
  BucketChars:
    Description: Please enter 4 random digit characters
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t1.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Default: "EC2 KeyPair"
    Description: "The existing of EC2 KeyPair name to enable SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: The existing of EC2 KeyPair name.

Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    ap-southeast-1:
      HVM64: ami-0ba35dc9caf73d1c7
      HVMG2: ami-0e46ce0d6a87dc979
    ap-southeast-2:
      HVM64: ami-0ae99b503e8694028
      HVMG2: ami-0c0ab057a101d8ff2

Resources:
  S3PublicWrite:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName:
        !Join ["-", [s3-public-write-cloudsec-academy, !Ref BucketChars]]
      AccessControl: PublicReadWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: FALSE #Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket.
        BlockPublicPolicy: FALSE #Specifies whether Amazon S3 should block public bucket policies for this bucket.
        IgnorePublicAcls: FALSE #Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket.
        RestrictPublicBuckets: FALSE #Specifies whether Amazon S3 should restrict public bucket policies for this bucket.

  S3PublicRead:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName:
        !Join ["-", [s3-public-read-cloudsec-academy, !Ref BucketChars]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: FALSE #Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket.
        BlockPublicPolicy: FALSE #Specifies whether Amazon S3 should block public bucket policies for this bucket.
        IgnorePublicAcls: FALSE #Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket.
        RestrictPublicBuckets: FALSE #Specifies whether Amazon S3 should restrict public bucket policies for this bucket.

  # EC2 Instance Target 1 with port 80

  EC2Instance80:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstanceSecurityGroup80
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      Tags:
        - Key: Name
          Value: tkpd-ec2-port-22
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          service httpd start
          echo "<html><body><h1>Greetings from Tokopedia Academy. Hello from Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html

  InstanceSecurityGroup80:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable http port open
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0

  # EC2 Instance Target 2 with port 22
  # description: create EC2 instance that allows
  #   all CIDR 0.0.0.0/0 to access port 80

  EC2Instance22:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstanceSecurityGroup22
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      Tags:
        - Key: Name
          Value: tkpd-ec2-port-80

  InstanceSecurityGroup22:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable ssh port (22) open
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0

  # EC2 Instance as Tester

  EC2InstanceTester:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstanceSecurityGroupTester
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: tkpd-ec2-ext-conn
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          mkdir domains && curl https://raw.githubusercontent.com/jasongautama/academy-repo/main/queries.txt > ./domains/queries.txt
          curl https://raw.githubusercontent.com/jasongautama/academy-repo/main/guard-duty-tester.sh > guard-duty-tester.sh
          chmod a+x guard-duty-tester.sh && ./guard-duty-tester.sh
          

  InstanceSecurityGroupTester:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Sec Group for Tester Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0

Outputs:
  PublicReadBucket:
    Description: S3 Bucket that is made to be public
    Value: !Ref S3PublicRead
  InstanceIdEC2p80:
    Description: InstanceId of EC2 instance with port 80 open
    Value: !Ref EC2Instance80
  InstanceIdEC2p22:
    Description: InstanceId of EC2 instance with port 22 open
    Value: !Ref EC2Instance22
  InstanceIdEC2p22:
    Description: InstanceId of EC2 instance with port 22 open
    Value: !Ref EC2InstanceTester
  CurrentAvailabilityZone:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt
      - EC2Instance80
      - AvailabilityZone
  PublicDNSport80:
    Description: Use this DNS url to visit the welcome page
    Value: !GetAtt
      - EC2Instance80
      - PublicDnsName
  PublicIPport80:
    Description: Public IP address for EC2 port 80 instance
    Value: !GetAtt
      - EC2Instance80
      - PublicIp
